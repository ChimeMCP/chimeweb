# 开发工作流指南

## 环境设置

### 项目启动
```bash
cd chimeweb
npm install
npm run dev
```

访问 http://localhost:3000 查看开发服务器。

### 可用脚本
- `npm run dev` - 启动开发服务器
- `npm run build` - 构建生产版本
- `npm run build:export` - 构建并导出静态文件
- `npm run lint` - 代码检查
- `npm run type-check` - TypeScript类型检查

## 文件组织规范

### 组件开发
1. **组件文件命名**: 使用PascalCase (如 `HeaderNav.tsx`)
2. **组件目录**: 按功能分类放在 [components/](mdc:components/) 下
3. **类型定义**: 在组件文件中定义Props接口

```tsx
interface ComponentProps {
  title: string;
  className?: string;
}

export default function Component({ title, className }: ComponentProps) {
  return <div className={cn("base-styles", className)}>{title}</div>
}
```

### 页面开发
1. **页面文件**: 在 [app/](mdc:app/) 目录下创建
2. **元数据**: 使用Next.js的metadata API
3. **布局**: 可选择性使用layout.tsx

### 样式规范
1. **优先使用Tailwind CSS类名**
2. **遵循编钟主题色彩**
3. **保持响应式设计**
4. **使用CSS变量进行主题切换**

## 数据管理

### 静态数据
- MCP Server数据: [data/mcp-servers/](mdc:data/mcp-servers/)
- 分类数据: [data/mcp-servers/categories.json](mdc:data/mcp-servers/categories.json)
- 精选数据: [data/mcp-servers/featured.json](mdc:data/mcp-servers/featured.json)

### 类型定义
所有数据类型在 [lib/types.ts](mdc:lib/types.ts) 中定义，确保类型安全。

## 部署

### 推荐平台
- **Vercel**: 零配置部署，推荐用于生产
- **Netlify**: 静态站点部署
- **自托管**: 使用静态文件导出

### 构建优化
- 使用 `npm run build:export` 生成静态文件
- 静态文件输出到 `out/` 目录
- 支持CDN加速部署
